{"ast":null,"code":"var _jsxFileName = \"/Users/carldiederichs/code/carldiederichs/javascript-projects/mern-udemy/places-mern-project/react-frontend/src/places/pages/UpdatePlace.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport './PlaceForm.css';\nconst DUMMY_PLACES = [{\n  id: 'p1',\n  title: 'Empire State Building',\n  description: 'One of the most famous sky scrapers in the world!',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/df/NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St., New York, NY 10001, United States',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878531\n  },\n  creator: 'u1'\n}, {\n  id: 'p2',\n  title: 'Empire State Building',\n  description: 'One of the most famous sky scrapers in the world!',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/df/NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St., New York, NY 10001, United States',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878531\n  },\n  creator: 'u2'\n}];\nconst UpdatePlace = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const placeId = useParams().placeId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n  useEffect(() => {\n    setFormData({\n      title: {\n        value: identifiedPlace.title,\n        isValid: true\n      },\n      description: {\n        value: identifiedPlace.description,\n        isValid: true\n      }\n    }, true);\n    setIsLoading(false);\n  }, [setFormData, identifiedPlace]);\n  if (!identifiedPlace) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\"));\n  }\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  }\n  return formState.inputs.title.value && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.title.value,\n    initialValid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"UPDATE PLACE\"));\n};\nexport default UpdatePlace;","map":{"version":3,"names":["React","useEffect","useState","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_PLACES","id","title","description","imageUrl","address","location","lat","lng","creator","UpdatePlace","isLoading","setIsLoading","placeId","formState","inputHandler","setFormData","value","isValid","identifiedPlace","find","p","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","inputs","onSubmit","placeUpdateSubmitHandler","element","type","label","validators","errorText","onInput","initialValue","initialValid","disabled"],"sources":["/Users/carldiederichs/code/carldiederichs/javascript-projects/mern-udemy/places-mern-project/react-frontend/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\"; \nimport './PlaceForm.css';\n\nconst DUMMY_PLACES= [\n  {\n    id: 'p1',\n    title: 'Empire State Building',\n    description: 'One of the most famous sky scrapers in the world!',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/df/NYC_Empire_State_Building.jpg',\n    address: '20 W 34th St., New York, NY 10001, United States',\n    location: {\n      lat: 40.7484405, \n      lng: -73.9878531, \n    },\n    creator: 'u1'\n  },\n  {\n    id: 'p2',\n    title: 'Empire State Building',\n    description: 'One of the most famous sky scrapers in the world!',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/df/NYC_Empire_State_Building.jpg',\n    address: '20 W 34th St., New York, NY 10001, United States',\n    location: {\n      lat: 40.7484405, \n      lng: -73.9878531, \n    },\n    creator: 'u2'\n  }\n];\n\nconst UpdatePlace = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const placeId = useParams().placeId;\n  \n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '', \n        isValid: false\n      }\n    }, \n    false\n  );\n\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n\n  useEffect(() => {\n    setFormData(\n      {\n        title: {\n          value: identifiedPlace.title,\n          isValid: true\n        },\n        description: {\n          value: identifiedPlace.description,\n          isValid: true\n        }\n      },\n      true\n    );\n    setIsLoading(false);\n  }, [setFormData, identifiedPlace]);\n  \n    if (!identifiedPlace) {\n      return (\n        <div className=\"center\">\n          <h2>Could not find place!</h2>\n        </div>\n      );\n    }\n  \n  if (isLoading) {\n    return (\n      <div className='center'>\n        <h2>Loading...</h2>\n      </div>\n    );\n  }\n\n  return (\n    formState.inputs.title.value && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n      <Input \n        id='title' \n        element='input' \n        type='text' \n        label='title' \n        validators={[VALIDATOR_REQUIRE()]} \n        errorText='Please enter a valid title.' \n        onInput={inputHandler}\n        initialValue={formState.inputs.title.value}\n        initialValid={formState.inputs.title.isValid}\n      />\n\n      <Input \n        id='description' \n        element='textarea' \n        label='Description' \n        validators={[VALIDATOR_MINLENGTH(5)]} \n        errorText='Please enter a valid description (min. 5 characters).' \n        onInput={inputHandler}\n        initialValue={formState.inputs.description.value}\n        initialValid={formState.inputs.description.isValid}\n      />\n      <Button type='submit' disabled={!formState.isValid}>\n          UPDATE PLACE\n      </Button>\n    </form>\n  );\n}; \n\nexport default UpdatePlace; "],"mappings":"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"},"metadata":{},"sourceType":"module"}