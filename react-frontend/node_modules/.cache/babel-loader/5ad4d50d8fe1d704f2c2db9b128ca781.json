{"ast":null,"code":"var _jsxFileName = \"/Users/carldiederichs/code/carldiederichs/javascript-projects/mern-udemy/places-mern-project/react-frontend/src/places/pages/UpdatePlace.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from 'react-router-dom';\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport './PlaceForm.css';\nconst UpdatePlace = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(`http://localhost:5000/api/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        'Content-Type': 'application/json'\n      });\n      history.push('/');\n    } catch (err) {}\n  };\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  }\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\")));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"UPDATE PLACE\")), \";\");\n};\nexport default UpdatePlace;","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","Card","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","UpdatePlace","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","placeId","history","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","onClear","onSubmit","id","element","type","label","validators","errorText","onInput","initialValue","initialValid","disabled"],"sources":["/Users/carldiederichs/code/carldiederichs/javascript-projects/mern-udemy/places-mern-project/react-frontend/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\"; \nimport { useHttpClient } from '../../shared/hooks/http-hook'; \nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport './PlaceForm.css';\n\n\n\nconst UpdatePlace = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient(); \n  const [loadedPlace, setLoadedPlace] = useState(); \n\n  const placeId = useParams().placeId;\n  const history = useHistory(); \n  \n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '', \n        isValid: false\n      }\n    }, \n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`\n      ); \n      setLoadedPlace(responseData.place);\n      setFormData(\n        {\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,  \n            isValid: true\n          }\n        }, \n        true\n      ); \n      } catch (err) {}\n\n    }; \n    fetchPlace(); \n  }, [sendRequest, placeId, setFormData]); \n    \n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `http://localhost:5000/api/places/${placeId}`, \n        'PATCH', \n        JSON.stringify({\n        title: formState.inputs.title.value, \n        description: formState.inputs.description.value,\n      }), \n        {\n          'Content-Type': 'application/json'\n        }\n      );\n      history.push('/'); \n    } catch (err) {}\n  };\n  \n  if (isLoading) {\n    return (\n      <div className='center'>\n        <LoadingSpinner/>\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  } \n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} /> \n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input \n            id='title' \n            element='input' \n            type='text' \n            label='title' \n            validators={[VALIDATOR_REQUIRE()]} \n            errorText='Please enter a valid title.' \n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n\n          <Input \n            id='description' \n            element='textarea' \n            label='Description' \n            validators={[VALIDATOR_MINLENGTH(5)]} \n            errorText='Please enter a valid description (min. 5 characters).' \n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type='submit' disabled={!formState.isValid}>\n              UPDATE PLACE\n          </Button>\n        </form>\n      )};\n    </React.Fragment>\n  );\n}; \n\nexport default UpdatePlace; "],"mappings":"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"},"metadata":{},"sourceType":"module"}